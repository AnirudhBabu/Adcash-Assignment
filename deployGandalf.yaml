- name: Create Azure Kubernetes Cluster to host gandalfApp
  hosts: control
  connection: ssh
  vars:
    auth_source: "cli"

  tasks:
    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: Adcash_Assignment
        allocation_method: Static
        name: gandalfIP
        sku: Standard
        location: switzerlandnorth
      register: output_ip_address
    - name: Store public IP for later
      set_fact:
        aks_public_ip: "{{ output_ip_address.state.ip_address }}"

    - name: Public IP display
      debug:
        msg: "The public IP is {{ aks_public_ip }}."
    - name: Create Network Security Group that allows HTTP and SSH
      azure_rm_securitygroup:
        resource_group: Adcash_Assignment
        name: Ansible-Control-Node-nsg
        rules:
          - name: Allow_HTTP_Traffic
            protocol: TCP
            destination_port_range: 80
            access: Allow
            priority: 1001
            direction: Inbound
          - name: SSH
            protocol: TCP
            destination_port_range: 22
            access: Allow
            priority: 1010
            direction: Inbound

    - name: Create subnet for Node.js app
      azure.azcollection.azure_rm_subnet:
        name: nodeAppSubnet
        resource_group: Adcash_Assignment
        virtual_network_name: Ansible-Control-Node-vnet
        address_prefix: 10.0.1.0/24
        security_group: Ansible-Control-Node-nsg
        state: present

    - name: Generate SSH key pair for AKS access
      ansible.builtin.openssh_keypair:
        path: /home/adcash/.ssh/id_rsa
        type: rsa
        size: 4096
        mode: '0600'

    - name: Get public SSH key
      shell: cat /home/adcash/.ssh/id_rsa.pub
      register: ssh_key_cat
      changed_when: false

    - set_fact:
        ssh_key: "{{ ssh_key_cat.stdout }}"

    - name: Create a managed Azure Container Services (AKS) cluster
      vars:
        resource_group: Adcash_Assignment
        location: switzerlandnorth
        aks_name: gandalfCluster
        username: adcash
        ssh_key: "{{ ssh_key }}"
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret }}"
        aks_version: 1.33.1
      azure_rm_aks:
        name: "{{ aks_name }}"
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        dns_prefix: "{{ aks_name }}"
        kubernetes_version: "{{ aks_version }}"
        linux_profile:
          admin_username: "{{ username }}"
          ssh_key: "{{ ssh_key }}"
        service_principal:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
        agent_pool_profiles:
          - name: userpool
            count: 1
            vm_size: Standard_A2_v2
          - name: systempool
            count: 1
            vm_size: Standard_A2_v2
            mode: System
    - name: Install kubectl (version pinned)
      shell: |
        if ! command -v kubectl &>/dev/null; then
          VERSION="v1.29.3"
          curl -LO "https://dl.k8s.io/release/$VERSION/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
        else
          echo "kubectl already installed"
        fi
      args:
        executable: /bin/bash
      changed_when: false


- name: Deploy GandalfApp to AKS
  hosts: control
  connection: ssh
  vars:
    deployment_manifest: deployment.yaml
    service_manifest: service.yaml
    resource_group: Adcash_Assignment
    cluster_name: GandalfCluster

  tasks:
    - name: Clone GitHub repo
      git:
        repo: 'https://github.com/AnirudhBabu/Adcash-Assignment.git'
        dest: '/home/adcash/adcash-assignment'
        version: main

    - name: Get AKS credentials for kubectl
      shell: |
        az aks get-credentials \
          --resource-group {{ resource_group }} \
          --name {{ cluster_name }} \
          --overwrite-existing
      changed_when: true

    - name: Create GHCR pull secret
      shell: |
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=anirudhbabu \
          --docker-password={{ GHCR_PAT }} \
          --docker-email=anirudhbabu2001@gmail.com || echo "ghcr-secret already exists"
      args:
        executable: /bin/bash
      changed_when: false

    - name: Render service manifest with correct values
      template:
        src: ./service.yaml.j2
        dest: ./service.yaml

    - name: Render deployment manifest with correct values
      template:
        src: ./deployment.yaml.j2
        dest: ./deployment.yaml

    - name: Apply Kubernetes Deployment
      shell: kubectl apply -f ./{{ deployment_manifest }}

    - name: Apply Kubernetes Service
      shell: kubectl apply -f ./{{ service_manifest }}

    - name: Wait for Gandalf pod to be live
      shell: |
        kubectl rollout status deployment/gandalf-app
      register: rollout_status
      until: rollout_status.stdout.find("successfully rolled out") != -1
      retries: 5
      delay: 5

- name: Deploy a VM for Prometheus Server
  hosts: control
  connection: ssh
  tasks:
    - name: Generate SSH key pair for Prometheus VM
      community.crypto.openssh_keypair:
        path: /home/adcash/.ssh/prometheus_id_rsa
        type: rsa
        size: 4096
        mode: '0600'

    - name: Get public SSH key
      shell: cat /home/adcash/.ssh/prometheus_id_rsa.pub
      register: ssh_key_prom
      changed_when: false

    - set_fact:
        prom_ssh_key: "{{ ssh_key_prom.stdout }}"

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: Adcash_Assignment
        location: swedencentral
        name: prometheus-vnet
        address_prefixes: "10.0.0.0/16"

    - name: Add subnet
      azure_rm_subnet:
        resource_group: Adcash_Assignment
        name: prom-subnet
        address_prefix: "10.0.1.0/24"
        virtual_network: prometheus-vnet

    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: Adcash_Assignment
        location: swedencentral
        allocation_method: Static
        sku: Standard
        name: promPublicIP
      register: output_ip_address_prom
    
    - name: Public IP of VM
      debug:
        msg: "The public IP of prometheus server is {{ output_ip_address_prom.state.ip_address }}."

    - name: Store public IP of prometheus for later
      set_fact:
        prom_public_ip: "{{ output_ip_address_prom.state.ip_address }}"

    - name: Create Network Security Group that allows SSH and outbound HTTP
      azure_rm_securitygroup:
        resource_group: Adcash_Assignment
        name: prometheus-nsg
        rules:
          - name: Allow_SSH
            protocol: TCP
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: allow_outbound_http
            access: Allow
            direction: Outbound
            protocol: TCP
            priority: 1010
            source_address_prefix: '*'
            source_port_range: '*'
            destination_address_prefix: '{{ aks_public_ip }}'
            destination_port_range: '80'

    - name: Create virtual network interface card
      azure_rm_networkinterface:
        resource_group: Adcash_Assignment
        name: prometheusNIC
        virtual_network: prometheus-vnet
        location: swedencentral
        subnet: prom-subnet
        ip_configurations:
          - name: ipconfig1
            public_ip_name: promPublicIP
        security_group: prometheus-nsg

    - name: Create a VM
      azure_rm_virtualmachine:
        resource_group: Adcash_Assignment
        name: prom-server
        vm_size: Standard_A2_v2
        location: swedencentral
        admin_username: promSnoop
        network_interfaces: prometheusNIC
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/promSnoop/.ssh/authorized_keys
            key_data: "{{ prom_ssh_key }}"
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
      register: prom_vm

- name: Configure VM to be a Prometheus Server
  hosts: control
  connection: ssh
  tasks:
    - name: Add prom-server to inventory dynamically
      ansible.builtin.add_host:
        name: prom-server
        ansible_host: "{{ prom_public_ip }}"
        ansible_user: promSnoop
        ansible_private_key_file: /home/adcash/.ssh/prometheus_id_rsa
        ansible_ssh_common_args: >-
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null
        groups: prometheus

    - name: Show contents of inventory.ini
      delegate_to: localhost
      ansible.builtin.shell: cat ~/adcash-assignment/inventory.ini
      register: inventory_contents

    - name: Display inventory file contents
      debug:
        var: inventory_contents.stdout


    - name: Trust prom-server host key
      ansible.builtin.known_hosts:
        name: "{{ prom_public_ip }}"
        key: "{{ lookup('pipe', 'ssh-keyscan {{ prom_public_ip }}') }}"
        path: "~/.ssh/known_hosts"

    - name: Install Prometheus prerequisites
      become: true
      apt:
        update_cache: yes
        name: 
          - wget
          - tar
          - curl
      delegate_to: prom-server

    - name: Download Prometheus tarball
      become: true
      get_url:
        url: https://github.com/prometheus/prometheus/releases/download/v2.48.1/prometheus-2.48.1.linux-amd64.tar.gz
        dest: /tmp/prometheus.tar.gz
      delegate_to: prom-server

    - name: Extract Prometheus binaries
      become: true
      unarchive:
        src: /tmp/prometheus.tar.gz
        dest: /opt/
        remote_src: yes
      delegate_to: prom-server

    - name: Create Prometheus user & directories
      become: true
      ansible.builtin.user:
        name: prometheus
        shell: /sbin/nologin
      delegate_to: prom-server

    - name: Setup Prometheus folders & move binaries
      become: true
      shell: |
        mv /opt/prometheus-2.48.1.linux-amd64/prometheus /usr/local/bin/
        mv /opt/prometheus-2.48.1.linux-amd64/promtool /usr/local/bin/
        mkdir -p /etc/prometheus /var/lib/prometheus
        mv /opt/prometheus-2.48.1.linux-amd64/consoles /etc/prometheus/
        mv /opt/prometheus-2.48.1.linux-amd64/console_libraries /etc/prometheus/
      delegate_to: prom-server

    - name: Create Prometheus config file
      become: true
      copy:
        dest: /etc/prometheus/prometheus.yml
        content: |
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'gandalf_scraper'
              static_configs:
                - targets: ['{{ static_ip }}:80']
              metrics_path: /metrics
      delegate_to: prom-server

    - name: Create systemd service for Prometheus
      become: true
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus Monitoring
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          ExecStart=/usr/local/bin/prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus \
            --web.console.templates=/etc/prometheus/consoles \
            --web.console.libraries=/etc/prometheus/console_libraries
          Restart=always

          [Install]
          WantedBy=multi-user.target
      delegate_to: prom-server
        

    - name: Reload systemd and start Prometheus
      become: true
      shell: |
        systemctl daemon-reload
        systemctl enable prometheus
        systemctl start prometheus
      delegate_to: prom-server
