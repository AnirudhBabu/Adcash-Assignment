- name: Setup control node with Python, Ansible, and Azure extras
  hosts: control
  connection: ssh
  become: true

  tasks:
    - name: Ensure apt cache is updated
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install system dependencies
      apt:
        name:
          - software-properties-common
          - python3
          - python3-pip
          - curl
        state: present

    - name: Install Ansible
      shell: |
          apt update
          grep -q "^deb .*\bansible\b" /etc/apt/sources.list.d/ansible-ansible.list || \
            add-apt-repository --yes --update ppa:ansible/ansible
          dpkg -s ansible >/dev/null 2>&1 || apt install ansible -y
          [ -d ~/.ansible/collections/ansible_collections/azure/azcollection ] || \
            ansible-galaxy collection install azure.azcollection --force
          pip3 list | grep azure-cli >/dev/null || \
            pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt --break-system-packages

    - name: Install Azure CLI
      shell: |
          if ! command -v az &>/dev/null; then
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          else
            echo "Azure CLI already installed"
          fi
      args:
        executable: /bin/bash
      changed_when: false

- name: Create Azure Kubernetes Cluster to host gandalfApp
  hosts: control
  connection: ssh
  environment:
    AZURE_TENANT: "{{ AZURE_TENANT }}"
    AZURE_SUBSCRIPTION_ID: "{{ AZURE_SUBSCRIPTION_ID }}"
    AZURE_CLIENT_ID: "{{ AZURE_CLIENT_ID }}"
    AZURE_SECRET: "{{ AZURE_SECRET }}"
  vars:
    auth_source: "env"

  tasks:
    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: adcash-assignment
        name: gandalf-vnet
        location: swedencentral
        address_prefixes: "10.0.0.0/16"

    - name: Add subnet
      azure_rm_subnet:
        resource_group: adcash-assignment
        name: nodeAppSubnet
        address_prefix: "10.0.1.0/24"
        virtual_network: gandalf-vnet

    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: adcash-assignment
        allocation_method: Static
        name: gandalfIP
        sku: Standard
        location: swedencentral
      register: output_ip_address

    - name: Store public IP for later
      set_fact:
        aks_public_ip: "{{ output_ip_address.state.ip_address }}"

    - name: Public IP display
      debug:
        msg: "The public IP is {{ aks_public_ip }}."

    - name: Write AKS public IP to disk
      copy:
        content: "{{ aks_public_ip }}"
        dest: /tmp/aks_ip.txt

    - name: Create Network Security Group that allows HTTP and SSH
      azure_rm_securitygroup:
        resource_group: adcash-assignment
        name: gandalf-app-nsg
        location: swedencentral
        rules:
          - name: Allow_HTTP_Traffic
            protocol: TCP
            destination_port_range: 80
            access: Allow
            priority: 1001
            direction: Inbound
          - name: SSH
            protocol: TCP
            destination_port_range: 22
            access: Allow
            priority: 1010
            direction: Inbound

    - name: Create subnet for Node.js app
      azure.azcollection.azure_rm_subnet:
        name: nodeAppSubnet
        resource_group: adcash-assignment
        virtual_network_name: gandalf-vnet
        address_prefix: 10.0.1.0/24
        security_group: gandalf-app-nsg
        state: present

    - name: Generate SSH key pair for AKS access
      ansible.builtin.openssh_keypair:
        path: /home/adcash/.ssh/id_rsa
        type: rsa
        size: 4096
        mode: '0600'

    - name: Get public SSH key
      shell: cat /home/adcash/.ssh/id_rsa.pub
      register: ssh_key_cat
      changed_when: false

    - set_fact:
        ssh_key: "{{ ssh_key_cat.stdout }}"

    - name: Check if AKS provider is already registered
      shell: |
        az provider show --namespace Microsoft.ContainerService --query "registrationState" -o tsv
      register: aks_provider_state
      changed_when: false
      failed_when: false

    - name: Register AKS provider only if not registered
      shell: |
        az login --service-principal \
        --username $AZURE_CLIENT_ID \
        --password $AZURE_SECRET \
        --tenant $AZURE_TENANT
        az provider register --namespace Microsoft.ContainerService
      when: aks_provider_state.stdout != "Registered"

    - name: Create a managed Azure Container Services (AKS) cluster
      vars:
        resource_group: adcash-assignment
        location: swedencentral
        aks_name: gandalfCluster
        username: adcash
        ssh_key: "{{ ssh_key }}"
        AZURE_CLIENT_ID: "{{ AZURE_CLIENT_ID }}"
        AZURE_SECRET: "{{ AZURE_SECRET }}"
        aks_version: 1.33.1
      azure_rm_aks:
        name: "{{ aks_name }}"
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        dns_prefix: "{{ aks_name }}"
        kubernetes_version: "{{ aks_version }}"
        linux_profile:
          admin_username: "{{ username }}"
          ssh_key: "{{ ssh_key }}"
        service_principal:
          client_id: "{{ AZURE_CLIENT_ID }}"
          client_secret: "{{ AZURE_SECRET }}"
        agent_pool_profiles:
          - name: userpool
            count: 1
            vm_size: Standard_A2_v2
          - name: systempool
            count: 1
            vm_size: Standard_A2_v2
            mode: System
            
    - name: Install kubectl (version pinned)
      shell: |
        if ! command -v kubectl &>/dev/null; then
          VERSION="v1.29.3"
          curl -LO "https://dl.k8s.io/release/$VERSION/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
        else
          echo "kubectl already installed"
        fi
      args:
        executable: /bin/bash
      changed_when: false


- name: Deploy GandalfApp to AKS
  hosts: control
  connection: ssh
  vars:
    deployment_manifest: deployment.yaml
    service_manifest: service.yaml
    resource_group: adcash-assignment
    cluster_name: GandalfCluster
    load_balancer_ip: "{{ aks_public_ip }}"

  tasks:
    - name: Get AKS credentials for kubectl
      shell: |
        az aks get-credentials \
          --resource-group {{ resource_group }} \
          --name {{ cluster_name }} \
          --overwrite-existing
      changed_when: true

    - name: Create GHCR pull secret
      shell: |
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=anirudhbabu \
          --docker-password={{ GHCR_PAT }} \
          --docker-email=anirudhbabu2001@gmail.com || echo "ghcr-secret already exists"
      args:
        executable: /bin/bash
      changed_when: false

    - name: Render service manifest with correct values
      template:
        src: ./service.yaml.j2
        dest: ./service.yaml

    - name: Render deployment manifest with correct values
      template:
        src: ./deployment.yaml.j2
        dest: ./deployment.yaml

    - name: Apply Kubernetes Deployment
      shell: kubectl apply -f ./{{ deployment_manifest }}

    - name: Apply Kubernetes Service
      shell: kubectl apply -f ./{{ service_manifest }}

    - name: Wait for Gandalf pod to be live
      shell: |
        kubectl rollout status deployment/gandalf-app
      register: rollout_status
      until: rollout_status.stdout.find("successfully rolled out") != -1
      retries: 5
      delay: 5

- name: Deploy a VM for Prometheus Server
  hosts: control
  connection: ssh
  environment:
    AZURE_TENANT: "{{ AZURE_TENANT }}"
    AZURE_SUBSCRIPTION_ID: "{{ AZURE_SUBSCRIPTION_ID }}"
    AZURE_CLIENT_ID: "{{ AZURE_CLIENT_ID }}"
    AZURE_SECRET: "{{ AZURE_SECRET }}"
  vars:
    auth_source: "env"
    
  tasks:
    - name: Generate SSH key pair for Prometheus VM
      community.crypto.openssh_keypair:
        path: /home/adcash/.ssh/prometheus_id_rsa
        type: rsa
        size: 4096
        mode: '0600'

    - name: Get public SSH key
      shell: cat /home/adcash/.ssh/prometheus_id_rsa.pub
      register: ssh_key_prom
      changed_when: false

    - set_fact:
        prom_ssh_key: "{{ ssh_key_prom.stdout }}"

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: adcash-assignment
        location: switzerlandnorth
        name: prometheus-vnet
        address_prefixes: "10.0.0.0/16"

    - name: Add subnet
      azure_rm_subnet:
        resource_group: adcash-assignment
        name: prom-subnet
        address_prefix: "10.0.1.0/24"
        virtual_network: prometheus-vnet

    - name: Create public IP address
      azure_rm_publicipaddress:
        resource_group: adcash-assignment
        location: switzerlandnorth
        allocation_method: Static
        sku: Standard
        name: promPublicIP
      register: output_ip_address_prom
    
    - name: Public IP of VM
      debug:
        msg: "The public IP of prometheus server is {{ output_ip_address_prom.state.ip_address }}."

    - name: Write Prometheus public IP to disk
      copy:
        content: "{{ output_ip_address_prom.state.ip_address }}"
        dest: /tmp/prometheus_ip.txt

    - name: Create Network Security Group that allows SSH and HTTP
      azure_rm_securitygroup:
        resource_group: adcash-assignment
        name: prometheus-nsg
        location: switzerlandnorth
        rules:
          - name: Allow_SSH
            protocol: TCP
            destination_port_range: 22
            access: Allow
            priority: 1001
            direction: Inbound
          - name: allow_outbound_http
            access: Allow
            direction: Outbound
            protocol: TCP
            priority: 1010
            destination_port_range: '80'
          - name: allow_inbound_to_prom_port
            access: Allow
            direction: Inbound
            protocol: TCP
            priority: 1020
            destination_port_range: '9090'
          - name: allow_inbound_http
            access: Allow
            direction: Inbound
            protocol: TCP
            priority: 1025
            destination_port_range: '80'

    - name: Create virtual network interface card
      azure_rm_networkinterface:
        resource_group: adcash-assignment
        name: prometheusNIC
        virtual_network: prometheus-vnet
        location: switzerlandnorth
        subnet: prom-subnet
        ip_configurations:
          - name: ipconfig1
            public_ip_name: promPublicIP
        security_group: prometheus-nsg

    - name: Create a VM
      azure_rm_virtualmachine:
        resource_group: adcash-assignment
        name: prom-server
        vm_size: Standard_A2_v2
        location: switzerlandnorth
        admin_username: promSnoop
        network_interfaces: prometheusNIC
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/promSnoop/.ssh/authorized_keys
            key_data: "{{ prom_ssh_key }}"
        image:
          offer: 0001-com-ubuntu-server-jammy
          publisher: Canonical
          sku: 22_04-lts
          version: latest
      register: prom_vm